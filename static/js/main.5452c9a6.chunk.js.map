{"version":3,"sources":["pages/Home/cosmos.jpg","pages/Home/Home.jsx","components/Navbar/Navbar.jsx","components/Picture/Picture.jsx","pages/Gallery/Gallery.jsx","components/Footer/Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Home","url","todayDate","Date","firstDay","useEffect","localStorage","getItem","fetchImage","useState","image","setImage","newDate","a","data","console","log","fetch","formatDate","toISOString","substring","localDate","trim","json","checkImage","setMyDate","isImage","setIsImage","alert","includes","class","className","src","title","href","rel","target","onChange","date","onClickDay","clickedDate","setDate","getDate","clear","setItem","value","Navbar","to","Picture","Gallery","result","i","d","push","Last9Days","map","Footer","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,4RCkG5BC,MA5Ff,WAEE,IAAMC,EAAM,uDAENC,EAAY,IAAIC,KAChBC,EAAW,IAAID,KAAK,cAE1BE,qBAAU,WAC6B,OAAjCC,aAAaC,QAAQ,QACvBC,EAAWN,GAEXM,EAAWF,aAAaC,QAAQ,WAEjC,IAbW,MAeYE,mBAAS,KAfrB,mBAePC,EAfO,KAeAC,EAfA,KA6BRH,EAAU,uCAAG,WAAOI,GAAP,qBAAAC,EAAA,yDACbC,EAAO,GACPF,IAAYV,EAFC,uBAGfa,QAAQC,IAAI,eAHG,SAIFC,MAAMhB,GAJJ,OAIfa,EAJe,qCAMfC,QAAQC,IAAIJ,GACNM,EAAa,IAAIf,KAAKS,GAASO,cAAcC,UAAU,EAAG,IAC1DC,EAAYpB,EAAM,SAAWiB,EAAWI,OAC9CP,QAAQC,IAAI,uBATG,UAUFC,MAAMI,GAVJ,QAUfP,EAVe,gCAYGA,EAAKS,OAZR,QAYXb,EAZW,OAajBC,EAASD,GACTc,EAAWd,GAdM,4CAAH,sDA7BF,EA8CYD,mBAAS,IAAIN,MA9CzB,mBA8CDsB,GA9CC,aAgDgBhB,mBAAS,MAhDzB,mBAgDPiB,EAhDO,KAgDEC,EAhDF,KAkDRH,EAAa,SAACd,GACL,OAAVA,EACDkB,MAAM,4CAENlB,EAAMT,IAAI4B,SAAS,WAAaF,GAAW,GAAQA,GAAW,IAIlE,OACE,yBAAKG,MAAM,iBACT,yBAAKA,MAAM,mDAERJ,EACG,4BAAQK,UAAU,QAAQC,IAAKtB,EAAMT,MACrC,yBAAK6B,MAAM,YAAYE,IAAKtB,EAAMT,OAGxC,yBAAK6B,MAAM,gBAET,0BAAMA,MAAM,gDACTpB,EAAMuB,MAMP,uBAAGH,MAAM,wBAAT,cACF,2BAAG,uBAAGI,KAAK,2CAA2CC,IAAI,sBAAsBC,OAAO,UAApF,yBAEL,yBAAKN,MAAM,eACT,0BAAMA,MAAM,gDAAZ,aAAqE,uBAAGA,MAAM,wBAAT,UACrE,uHAEF,kBAAC,IAAD,CACEC,UAAU,WACVM,SAAU,SAAAC,GAAI,OAAIb,EAAUa,IAC5BC,WAAY,SAAAD,GAAI,OArEDE,EAqEiBF,EApEpCvB,QAAQC,IAAI,gBAAiBwB,GAC7BzB,QAAQC,IAAI,cAAeZ,QACvBoC,IAAgBpC,GAAYF,EAAUuC,QAAQvC,EAAUwC,UAAY,GACtEd,MAAM,0EAENtB,aAAaqC,QACbrC,aAAasC,QAAQ,OAAQJ,GAC7BhC,EAAWgC,KARK,IAACA,GAsEfK,MAAO,IAAI1C,KAAKG,aAAaC,QAAQ,a,cCzE9BuC,MAhBf,WACE,OACE,oCACE,yBAAKf,UAAU,UACb,yBAAKD,MAAM,iCACT,uBAAGI,KAAK,IAAIH,UAAU,mBAAtB,QACA,wBAAIA,UAAU,eACZ,kBAAC,IAAD,CAAMgB,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,gB,MC2BGC,MAnCf,YAA4B,IAATV,EAAQ,EAARA,KAIjBjC,qBAAU,WACRG,EAAW8B,KACV,IANsB,MAQC7B,mBAAS,KARV,mBAQlBC,EARkB,KAQXC,EARW,KAUnBH,EAAU,uCAAG,WAAOI,GAAP,iBAAAC,EAAA,sEACEI,MAAMhB,6DAAiBW,EAAQU,QADjC,cACXR,EADW,gBAEGA,EAAKS,OAFR,OAEXb,EAFW,OAGjBC,EAASD,GACTc,EAAWd,GAJM,2CAAH,sDAVS,EAiBKD,mBAAS,MAjBd,mBAiBlBiB,EAjBkB,KAiBTC,EAjBS,KAmBnBH,EAAa,SAACd,GAClBA,EAAMT,IAAI4B,SAAS,WAAaF,GAAW,GAAQA,GAAW,GAC9DZ,QAAQC,IAAIU,EAAS,8BAGvB,OACE,yBAAKK,UAAU,iBAEZL,EACK,4BAAQK,UAAU,MAAMC,IAAKtB,EAAMT,MACnC,yBAAK8B,UAAU,MAAMC,IAAKtB,EAAMT,Q,MCP7BgD,MAtBf,WAWE,OACE,yBAAKlB,UAAU,qBACb,wBAAIA,UAAU,iBAAd,6BACA,yBAAKA,UAAU,WAbnB,WAEE,IADA,IAAMmB,EAAS,GACNC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAI,IAAIjD,KACZiD,EAAEX,QAAQW,EAAEV,UAAYS,GACxBD,EAAOG,KAAKD,EAAEjC,eAGhB,OAAQ+B,EAMHI,GAAYC,KAAI,SAAAjB,GACf,OAAO,kBAAC,EAAD,CAASA,KAAMA,EAAKlB,UAAU,EAAG,Y,OCHnCoC,MAff,WACE,OACE,oCACE,4BAAQ1B,MAAM,oCACZ,yBAAKA,MAAM,oBACT,yBAAKA,MAAM,aAAX,4BAEE,uBAAGA,MAAM,iCAAiCM,OAAO,SAASD,IAAI,sBAAsBD,KAAK,iCAAzF,kBCYGuB,MAdf,WACC,OACC,kBAAC,IAAD,KACC,6BACC,kBAAC,EAAD,MACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW5D,IACjC,kBAAC,IAAD,CAAO0D,KAAK,WAAWE,UAAWX,KAEnC,kBAAC,EAAD,SCJgBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMC,c","file":"static/js/main.5452c9a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cosmos.59d9c495.jpg\";","import React, { useState, useEffect } from 'react'\nimport './Home.css'\nimport Calendar from 'react-calendar'\nimport Image from './cosmos.jpg'\nimport 'react-calendar/dist/Calendar.css'\n\nfunction Home() {\n\n  const url = 'https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY'\n  // const url = \"http://example.com\"\n  const todayDate = new Date()\n  const firstDay = new Date('1995-06-16')\n\n  useEffect(() => {\n    if (localStorage.getItem('date') === null) {\n      fetchImage(todayDate)\n    } else {\n      fetchImage(localStorage.getItem('date'))\n    }\n  }, [])\n\n  const [image, setImage] = useState(' ')\n\n  const changeState = (clickedDate) => {\n    console.log('clicked date ', clickedDate)\n    console.log('first date ', firstDay)\n    if (clickedDate === firstDay && todayDate.setDate(todayDate.getDate() + 1)) {\n      alert(\"Please, try not to choose dates from the future or earlier 1995 06 16\")\n    } else {\n      localStorage.clear()\n      localStorage.setItem('date', clickedDate)\n      fetchImage(clickedDate)\n    }\n  }\n\n  const fetchImage = async (newDate) => {\n    let data = ''\n    if (newDate === todayDate) {\n      console.log('ferch today')\n      data = await fetch(url)\n    } else {\n      console.log(newDate)\n      const formatDate = new Date(newDate).toISOString().substring(0, 10)\n      const localDate = url + '&date=' + formatDate.trim()\n      console.log('ferch the other day')\n      data = await fetch(localDate)\n    }\n    const image = await data.json()\n    setImage(image)\n    checkImage(image)\n  }\n\n  const [date, setMyDate] = useState(new Date())\n\n  const [isImage, setIsImage] = useState(null)\n\n  const checkImage = (image) => {\n    if(image === null) {\n      alert(\"Too many requests ;( \\nPlease, try later\")\n    } else {\n      image.url.includes('youtube') ? setIsImage(true) : setIsImage(false)\n    }  \n  }\n\n  return (\n    <div class=\"card img-card\">\n      <div class=\"card-image waves-effect waves-block waves-light\">\n        {/* <iframe className=\"video\" src={'https://www.youtube.com/embed/X_UOLpUDwpU?rel=0'} /> */}\n        {isImage\n          ? <iframe className=\"video\" src={image.url} />\n          : <img class=\"activator\" src={image.url} />\n        }\n      </div>\n      <div class=\"card-content\">\n\n        <span class=\"card-title activator grey-text text-darken-4\">\n          {image.title}\n          {/* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n\t\t\t\tUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \n\t\t\t\tDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n\t\t\t\tExcepteur sint occaecat cupidatat non proident,\n\t\t\t\tsunt in culpa qui officia deserunt mollit anim id est laborum. */}\n          <i class=\"material-icons right\">more_vert</i></span>\n        <p><a href=\"https://apod.nasa.gov/apod/astropix.html\" rel=\"noopener noreferrer\" target=\"_blank\">Go to the NASA page</a></p>\n      </div>\n      <div class=\"card-reveal\">\n        <span class=\"card-title activator grey-text text-darken-4\">Card Title<i class=\"material-icons right\">close</i></span>\n        <p>Here is some more information about this product that is only revealed once clicked on.</p>\n      </div>\n      <Calendar\n        className=\"calendar\"\n        onChange={date => setMyDate(date)}\n        onClickDay={date => changeState(date)}\n        value={new Date(localStorage.getItem('date'))}\n      />\n    </div>\n  )\n}\nexport default Home\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport './Navbar.css'\n\nfunction Navbar() {\n  return (\n    <>\n      <nav className=\"nawbar\">\n        <div class=\"nav-wrapper teal darken-1 px1\">\n          <a href=\"/\" className=\"brand-logo left\" >APOD</a>\n          <ul className=\"links right\">\n            <Link to='/'>Home</Link>\n            <Link to='/gallery'>Gallery</Link>\n          </ul>\n        </div>\n      </nav>\n    </>\n  )\n}\n\nexport default Navbar\n","import React, { useState, useEffect } from 'react'\nimport Image from '../../pages/Home/cosmos.jpg'\nimport \"./Picture.css\"\n\nfunction Picture({ date }) {\n\n  const url = 'https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY'\n  // const url = \"http://example.com\"\n  useEffect(() => {\n    fetchImage(date)\n  }, [])\n\n  const [image, setImage] = useState(' ')\n\n  const fetchImage = async (newDate) => {\n    const data = await fetch(url + '&date=' + newDate.trim())\n    const image = await data.json()\n    setImage(image)\n    checkImage(image)\n  }\n\n  const [isImage, setIsImage] = useState(null)\n\n  const checkImage = (image) => {\n    image.url.includes('youtube') ? setIsImage(true) : setIsImage(false)\n    console.log(isImage, \"boolean is image contains\")\n  }\n\n  return (\n    <div className='pic-container'>\n      {/* {image.url} */}\n      {isImage\n          ? <iframe className=\"pic\" src={image.url} />\n          : <img className=\"pic\" src={image.url} />\n        }\n      {/* <img className=\"pic\" src={image.url} /> */}\n    </div>\n  )\n}\nexport default Picture\n","import React, { useState, useEffect } from 'react'\nimport Picture from '../../components/Picture/Picture'\nimport \"./Gallery.css\"\n\nfunction Gallery() {\n  function Last9Days() {\n    const result = []\n    for (let i = 0; i < 9; i++) {\n      let d = new Date()\n      d.setDate(d.getDate() - i)\n      result.push(d.toISOString())\n    }\n\n    return (result)\n  }\n  return (\n    <div className='gallery-container'>\n      <h1 className=\"gallery-title\">Pictures of the last days</h1>\n      <div className=\"gallery\" >\n        {Last9Days().map(date => {\n          return <Picture date={date.substring(0, 10)} />\n        })}\n      </div>\n    </div>\n  )\n}\nexport default Gallery\n","import React from 'react'\n\nfunction Footer() {\n  return (\n    <>\n      <footer class=\"page-footer teal darken-1 footer\">\n        <div class=\"footer-copyright\">\n          <div class=\"container\">\n            © 2020 Anna Gudinskaya\n            <a class=\"grey-text text-lighten-4 right\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/gudinskaya\">My Github</a>\n            {/* <img src=\"/astronomy/public/GitHub.png\" className=\"image\"></img> */}\n          </div>\n        </div>\n      </footer>\n    </>\n  )\n}\nexport default Footer\n","import React from 'react'\nimport Home from './pages/Home/Home'\nimport Navbar from './components/Navbar/Navbar'\nimport Gallery from './pages/Gallery/Gallery'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Footer from './components/Footer/Footer'\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<Navbar />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/\" exact component={Home} />\n\t\t\t\t\t<Route path=\"/gallery\" component={Gallery} />\n\t\t\t\t</Switch>\n\t\t\t\t<Footer/>\n\t\t\t</div>\n\t\t</Router>\n\t)\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}